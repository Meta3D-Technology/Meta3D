# * TODO add action:event, handler to encapuslate action contribute
* TODO update action

refer to:  
https://cloud.tencent.com/document/product/1301/65931

https://cloud.tencent.com/document/product/1301/57912#handler-.E6.96.B9.E6.B3.95.E4.BD.BF.E7.94.A8.E4.BB.8B.E7.BB.8D


support:
- write handler functions bind to editor
through code editor(just copy and commit)

- or can load handler functions from action contribute


- trigger event with param



** DONE simplify action


# refactor dispatch:
# - rename to updateElementState
# - change to: updateElementState(uiState, (elementState) => new elementState)
# - remove reducer, directly update element state




# unify protocol to one protocol without config:
# - remove protocol config
# # - simplify ui control protocol config?


# remove getActions related code



# ** TODO enhance action


# # action get event+data+element state
# # action get event+element state
# action get event

# event.name: event name(e.g. "click")
# # event.target: current ui control(can get its data, e.g. rect, isDraw, ...)
# event.targetId: current ui control's id


# support:
# find any ui control's data(e.g. rect, isDraw, ...) by id

# # find any ui controls' id by tag


# add id:
# id not bind to element state
# id can be edit
#     check: id should be unique



## add tag:
## tag not bind to element state
## tag can be edit
##     # check: id should be unique



# get event


** DONE enhance action again


# trigger event with data:
# - data is json object
# - set data when set ui control's event handler



# action get event+data+element state



click event with action protocols:
define actionData

Inspector:
only show corresponding action select








** DONE refactor
# move ui control protocol->trigger event logic to ui control implement
#     check actionData type

refactor button protocol->generateHandleUIControlEventStr





# ** TODO 对扩展协议和贡献协议规范，整理出统一的格式



# 预先要发布协议；
# 装配时，选择一个协议，根据Config.ts生成inspector（like ui control protocol->Config）


# add ActionMRUtils

# support log,dispatch system action

# # get actionData


# # ** TODO remove protocol->Config.ts, move getActions to getContribute as actions; remove getActionName(protocol not define actionName!)


# # ** TODO read actions by parse getContribute instead of get from protocol config str!!!

# ** TODO action 能调用扩展（非贡献）的api

# ** TODO remove protocol->Config.ts, move them to action view data

# refer to element!

# ** TODO when switch to ui view, get selected actions' view data!


# ** TODO implement view


# ** TODO publish


# note:
# all actions use the same element protocol!
# (not define actionName in protocol)



# ** TODO import

# ** TODO future: support combine other actions
# left panel:
# Actions





# * TODO add 协作开发


* TODO editor export/import scene



** DONE export .glb

TODO add export scene extension:
    # download .glb
    invoke convertDataOrientedSceneToThreeScene

    //scene.add(camera)
        TODO handle camera


TODO add get three api extension:

TODO unify viewrect to pipeline-viewrect(update)



three-api
engine-scene
convert


scene-view1
whole



why disappear after download?


commit


run test



TODO update doc for fix:
viewrect
scene-view2


** TODO fix: can support multiple implements of the same protocol(but one for different version)





** TODO 加上代码框  更新扩展贡献的代码

每个selected extension,contribute(except pacakge) add selectarea to show and update its code


can't change protocol?
ans: no need to change it!



TODO not clean element assemble when switch between ap/element assemble






** TODO import .glb



TODO add three.js -> ec
    meta3d-scenegraph-converter-three:
        rename convert to convertDataOrientedSceneToThreeScene
        add convertThreeSceneToDataOrientedScene


# TODO add import scene extension:
TODO add import glb extension:
    # upload .glb
    invoke convertThreeSceneToDataOrientedScene




** TODO add to editor


TODO add import scene ui control
event:
onProgress
onFinish
onError


TODO add export scene ui control
onFinish
onError


# TODO add export/import scene action
TODO add actions
- handle error 
- download
- show progress


** TODO refactor: extract handle error event and action








* TODO implement dispose

** TODO add dispose job

** TODO handle converter for three


** TODO import scene should after dispose scene



* TODO editor export/import package

package = scene



* TODO platform export/import app