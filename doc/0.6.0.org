* DONE finish design

extension type:
common
entry

contribute type:
ui control
skin
element
action
component
work plugin


** step

# 1 in ap view: select extensions, contributes include control expect entry extension only once - global share
1 in ap view: select common extensions, ui control, skin, action, component, work plugin contributes only once - global share

for all elements

2 switch to ui view

3 decide canvas

4 finish and publish element contribute

onRegister:
add self to meta3dState

so can be registered in editor entry extension one by one


5 switch to ap view

6 select multiple published element contributes

7 select one entry extension

8 publish



* DONE rename event contribute to action contribute
rename eventName to actionName


* DONE rename custom control contribute to ui control contribute



* DONE contribute add type field

contribute type:
ui control
skin
element
action
component
work plugin


meta3d:
api add getAllContributesByType

# * TODO ap view: select common extensions, ui control, skin, action, component, work plugin contributes only once - global share


# share for all elements


# api add getAllContributesByType



# common extensions get by filter by getExtensionLife -> onStart not exist)



* DONE ap view

** DONE middle: define all canvas


# ui view has a global canvas
ui view can has multiple global canvas


add components:
CanvasController
View

store->View add canvas

action: canvas z-index, width, height



# global size

# should render all canvas with white background color


# default background color is black


** DONE middle-top: create canvas config

can specify canvas's absolute position, width, height, z-index

overflow: scroll



add to store


** DONE add canvas dom
background color: white
add boarder



# element with different canvas' size


** DONE bdd test

** DONE refactor: feature->prepare to prepare, not expose sandbox, snapshot!

** DONE run test

test canvas dom


* TODO add UI视图

visual element func

** goal:  remove element contribute code, all generated by json!




** DONE components: ap_view/

apViewState

run test:
should reset

** DONE add ui view

add ui view switch button

run test

*** DONE fix reset

apView, uiView add bdd test



** DONE left: UI Control Contributes, Selected UI Control Contributes

show by select control one by one


TODO get by type from selectedExtensions



** DONE bdd test

# contributes





** DONE run test


** DONE middle-top: select used canvas

# render used canvas

# should render all canvas with white background color


# default background color is black

with border


** DONE bdd test


** DONE move canvas controller to ap view, ui view use it

so application can use it when be published

** DONE start default run to draw selected canvas

implement by rescript


use the selected canvas


with shared registered;

register current element contribute(with fake one)
(javascript->webpack result)
(draw one button)
to ui view->store

# only register this element:
# json -> element contribute:
# change -> json -> generate element contribute and replace old one

not register action;
not bind event;


*** DONE extension life add onInit, onUpdate


*** TODO run


*** TODO ui view: add ui view visual

# *** TODO register default element

*** TODO invoke onInit when init

e.g. change canvas data

*** TODO invoke onUpdate when need update

# e.g. change canvas data, select ui control
e.g. change canvas data

invoke update function



** DONE bdd test UIVisual


** DONE run test

publish protocol, extension

run test


# TODO fix: not error message


# ** TODO can drag button(ui control) to canvas

** DONE fix: init once

** DONE fix: handle when change canvas data

** DONE fix: loading

** TODO click button(ui control), add to canvas

in default rect

*** DONE update "start default run" to draw view


test with test generated element code

click 

add action:
InitVisual
UpdateVisual


***  DONE pass bdd test

***  TODO pass run test



*** TODO generate json


json -> generate element contribute code(javascript)

ui control protocol should define json related meta data?

***  TODO pass bdd test



*** TODO update "start default run" to draw view


only register this element:
json -> element contribute:
change -> json -> generate element contribute and replace old one



***  TODO pass bdd test

***  TODO pass run test




** TODO bdd test






** TODO add e2e test to test: select ui control->should render app correctly!
refer to:
https://wanago.io/2019/12/30/javascript-testing-introduction-end-to-end-testing-cypress/




** TODO element add properties


update json






state:
default is empty, decide by element properties



# isShow: null / true / false
#     (add isShow to state when not null)

isShow: true / false
    # (add isShow to state when not null)
    mainly for multiple elements

execOrder: input: 0

# custom data:
# field name, field type, field default value

# (move wonder editor->script attribute here?)

** TODO reducer

*** TODO rewrite action contribute

return {
    ...,
    stateAction:
    {
        "changeText": {
            role: "secondButton",
            /value?
        }
    },

    // [
    //     {
    //         name: "changeText",
    //         // target:""
    //         role: "secondButton",
    //         // value: Math.random().toString()
    //     }
    // ],


    handler: (meta3dState, stateAction, eventData) => {
        uiState = dispatch(uiState,
            //     uiService.buildStateAction(
            //     {
            //         name: "changeText",
            //         // target:""
            //         role: "secondButton",
            //         value: Math.random().toString()
            //     }
            // )

            stateAction.build({
                name: "changeText",
                value: (oldValue) => Math.random()
            })
    },
    ...
}
)


*** TODO element add reducers

role(string):
list by select action contributes;
// can add custom role

reducer:
// "changeText": { role: "secondButton" }

list by stateAction names from select action contributes
    -> select state field(e.g.text)
// -> ( value, oldValue) => newValue
update it!





onRegister:
add self->reducer to meta3dState

so can be combined in editor entry extension 


* TODO feat: ui view->run in new tab

register action

bind event

loop





* TODO pass run test: single element

element contribute with two buttons:
one button
    when click the button, show the second button:
one button with different rect, color


* TODO publish element contribute(to replace element-button, element-button2) to user's Element Contributes

send to server


# onRegister:
# add self to meta3dState

# so can be registered in editor entry extension one by one

editor entry extension can get them by api.getAllContributesByType 




* TODO ap view:


** TODO select element contribute

# get from server by user

- select from contribute shop

- select element contribute



** TODO remove element-button, element-button2 contributes



** TODO select entry extension when click publish button!

# type:
# editor(default )
# // engine(default)
# user
#     (user implement and publish)
#     (filter by getExtensionLife -> onStart exist)

# show:
# editor entry extension
# // engine entry extension
# user's entry extensions(user implement and publish)

(filter by getExtensionLife -> onStart exist)

e.g. still use use-editor!


(only use the newest selected one!)


    # (engine should be extend package in the future)



note: remove entry extension step!!!


# ** TODO editor default extension

# create and insert canvas with global size;





# * TODO test(assemble-space): add bdd test



* TODO feat: import single element

1.in ap view
2.select other
3.select one element(import element)
4.switch to ui view
5.can continue edit the element visually

* TODO feat: import mutliple elements

1.in ap view
2.select other
3.select two elements(import element)
4.switch to ui view
5.can continue edit the two elements visually



* TODO pass run test: two elements

first element contribute:
one button


when click the button, show second element contribute:
one button with different rect, color




* TODO control add 

properies:

rect:
x y width height



isShow: true/false

    design for single element




event:

click,
    focus,
...



click:
list(action name) by select action contributes



styles:

skin






properties->input data
rect
(input data->rect need add "property" flag?)

styles->skin
(add to input data and add "style" flag?)

events->click event(add more event in the future)
(read events from protocol->event data?)







* TODO pass run test: single element

element contribute with two buttons:
one button
    when click the button, show second element contribute:
one button with different rect, color







* TODO ap view: select common extensions, ui control, skin, action, component, work plugin contributes only once - global share


share for all elements





common extensions get by filter by getExtensionLife -> onStart not exist)





* TODO more

** TODO add resize(%)


** TODO add effect of select in canvas


** TODO element properies add custom data
field name, field type, field default value

(move wonder editor->script attribute here?)



** TODO bdd test


** TODO run test




* TODO publish






* TODO extend package space

与“装配空间”并列！

add bdd test

type:
engine
editor
custom(in the future)


** TODO assemble-space: select entry extension should provide default editor entry extension if register editor type extend package!