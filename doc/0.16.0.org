* DONE action add in it element store

** DONE finish

TODO one action implement has one action protocol, not share!
  TODO move action name to protocol
  TODO move actionData to ui-control
    TODO rename actionData to uiData



TODO assemble-space

  # TODO need update bind element state to rect
  TODO remove "bind element state to rect"

  # TODO element inspector: show created element states, can't edit
  TODO remove element inspector
  TODO handle createState


TODO need refactor meta3d-action-click-button





TODO run test


commit



TODO update all actions
TODO remove meta3d-action-button-click-protocol


commit


////TODO refactor: rename handler, createState to handlerFunc, createStateFunc


////commit




** DONE update frontend, assemble-space for "one action implement has one action protocol, not share"

TODO dependent graph

TODO judge action(Market?)



* TODO use view control implement(low level) for scene view and game view


one canvas-one view-one gl


one engine state(meta3dState?)(encapsulate)



contain scene view and game view




# ** TODO add meshrenderer component


# has isRender


# ** TODO update PrepareRenderDataJob



** DONE render scene view and game view


share gl, engine state



encapsulate viewport logic



config:
viewRect


  |> DeviceManagerEngineService.setViewport(viewRect)
  |> DeviceManagerEngineService.setScissorTest(true)
  |> DeviceManagerEngineService.setScissor(viewRect)





scene view has default scene gameObjects



TODO add game view

TODO add run, stop action

TODO update use

TODO finish TODO

TODO commit


* TODO pass run test

TODO update add cube



TODO run test: default

  # game view not show

  # scene view active error
  # no arcball event

    # split pipeline three, camera, transform


TODO commit


TODO run test: add cube

  game view not add
    fix meta3dState?

TODO commit


TODO run test: run, stop

    loop gameview when stop


TODO commit


TODO finish TODOs



TODO need publish:
# meta3d-scenegraph-converter-three, gameview
# meta3d-engine-basic, gameview
# meta3d-engine-scene, gameview
use-editor
pipeline-camera
meta3d-editor-webgl1-three-run-engine-gameview+protocol
add-cube



TODO commit


* TODO fix: meta3dState

TODO use-editor/empty: main loop should get/set meta3dState?
TODO run action: loop should get/set meta3dState?



* TODO refactor: extract pipeline-editor-view-utils


* TODO update import/export scene, publish, dispose


** TODO how to handle publish and run? （发布时需要判断是否在run）
////责任链 or event queue or query element store?


- query element store





* TODO handle event

TODO default scene's camera add arcball

run action:
bind arcball event

stop action:
unbind arcball event


** TODO handle scene view, game view event


refer to wonder-editor code


add event target



dependent on scene view event, game view event(has independent state)?




* TODO run test: add scene view, game view based to show a cube + arcball camera






* TODO add two buttons, to add a cube gameObject and add a arcball camera controller gameObject



* TODO add run button to run game view



# * TODO refactor: extract 3D View custom control(low level)






* TODO refactor: utils not dependent protocols for scene view(e.g. engine-core-protocol, engine-whole-protocol)

use generic



* TODO fix: game view handle no camera



# * TODO scene view: add grid

# * TODO scene view: camera, direction light show image



* TODO add redo/undo

** TODO engine add redo/undo

three engine when restore to state:
- reset renderer
- init?

** TODO editor add redo/undo
not add redo/undo action/ui control!


** TODO fix: when stop, should restore to the state before run