* TODO three.js引擎

PBRMaterial+direction light+diffuse, metalroughness,... map


能够渲染较复杂的GLTF场景

** DONE change basic material to standard material


# TODO add BasicSourceTexture in contributes/
TODO add BasicSourceTexture in extensions/
  no bdd test

        image: TexImageSource | OffscreenCanvas,
        # mapping: Mapping,
        wrapS: Wrapping,
        wrapT: Wrapping,
        magFilter: MagnificationTextureFilter,
        minFilter: MinificationTextureFilter,
        format: PixelFormat,
        type: TextureDataType,
        # anisotropy: number,
        # encoding: TextureEncoding,
        isNeedUpdates
        flipY

  dispose:judge material



# TODO update engine core for texture contribute



TODO update PBRMaterial to add get/set basic textures
  bdd test

TODO update PBRMaterial to dispose map

TODO update PBRMaterial to clone for maps
  bdd test


TODO update meta3d-engine-scene-utils
PBRMaterial: set data, dispose, ////clone


let textureService =				 api.getExtensionService<textureService>(meta3dState, "meta3d-texture-basicsource")

let textureState = api.getExtensionState<textureState>(meta3dState, "meta3d-texture-basicsource")

textureService.addMaterial(textureState, )



TODO add Texture


# TODO add MeshPBRMaterial
TODO add MeshStandardMaterial
  TODO add MeshStandardMaterial
  TODO support diffuse, metalroughness, normal
  TODO support metalroughness, ...

TODO dispose:
dispose map


TODO clear:
clear map

** DONE add direction light

TODO support direction light

  convert
  import
  dispose


# ** TODO update load scene extension

# TODO handle pbr material, direction light



# ** TODO refactor: refactor scenegraph converter utils



** TODO run test: load and render a glb with maps:Lantern.glb

# TODO engine demo->default scene: load a glb with maps

# TODO build engine demo app

# TODO change default scene to loadScene(glb)




TODO default scene add direction light

TODO pass run test: default scene(light)

  //TODO why api not the same file?

  # TODO move dataName from protocol to implement?

  //TODO update all component protocol(except pbrmaterial pro):
  tsc

  TODO fix: no light
    # TODO why scenegraph utils not update?

TODO scene view 800*800


//TODO rename sceneview-utils



TODO add load glb button(directly add to scene)
  TODO extract load glb extension from load scene
  # TODO add import glb extension


TODO pass run test: Flower


TODO pass run test: Nefertiti
# TODO fix: indices convert err
# TODO fix: get/set tangents

TODO fix: no map




TODO need publish:
# scenegraph s, g
# whole s, g
# scene s,g
# # run engine s,g
# meta3d-pipeline-editor-webgl1-scene-view1, game view1



//TODO restore arcball, cube for default scene


TODO feat: arcball: add mouse wheel





# TODO rename loadScene to importGLB



TODO pass gameview run test:
  TODO need select:
  meta3d-pipeline-webgl1-three-gameview




TODO pass run test: publish with glb


* TODO Asset
GLB
# GLTF zip?

not use asset tree, use list/array instead which only has one level



* TODO 导入Asset

TODO load as a whole file, not extract textures, materials

TODO support drag loaded file to scene view

  # TODO use clone




TODO if exist the same name file, rename loaded one






* TODO load glb action: event sourcing
TODO handle outside
TODO handle backward func


TODO pass run test:redo/undo when run

TODO pass run test:import/export event



# * TODO change import/export to 导入/导出包(remain export scene)
* TODO change import/export to import/export Event

** TODO extract glb from allEvents




** TODO import/export Event support reset

** TODO import event: handle outside immutable data




# * TODO fix: auto upgrade: should keep canvas size